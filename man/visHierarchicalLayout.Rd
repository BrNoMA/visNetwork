% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/visHierarchicalLayout.R
\name{visHierarchicalLayout}
\alias{visHierarchicalLayout}
\title{Network visualization Hierarchical layout options}
\usage{
visHierarchicalLayout(graph, enabled = TRUE, levelSeparation = NULL,
  nodeSpacing = NULL, direction = NULL, layout = NULL)
}
\arguments{
\item{enabled}{: Boolean. Default to TRUE when calling this function.    Enable or disable the hierarchical layout.}

\item{levelSeparation}{: Number. Default to 150.  This defines the space between levels (in the Y-direction, considering UP-DOWN direction).}

\item{nodeSpacing}{: Number. Default to 100.  This defines the space between nodes in the same level (in the X-direction, considering UP-DOWN direction). This is only relevant during the initial placing of nodes.}

\item{direction}{: String. Default to 'UD'.  This defines the direction the network is drawn in. The supported directions are: Up-Down (UD), Down-Up (DU), Left-Right (LR) and Right-Left (RL). These need to be supplied by the acronyms in parentheses.}

\item{layout}{: String. Default to 'hubsize'.  This defines the way the nodes are distributed. Available options are "hubsize" and "direction". The default value is hubsize, meaning the node with the most edges connected to it (largest hub) is on top. Alternatively, direction arranges the nodes based on the direction of the edges.}
}
\description{
Network visualization Hierarchical layout options. See \url{http://visjs.org/docs/network.html#Hierarchical_layout}.
}
\examples{
nodes <- data.frame(id = 1:10)
edges <- data.frame(from = round(runif(8)*10), to = round(runif(8)*10))

visNetwork(nodes, edges) \%>\%
 visHierarchicalLayout()

visNetwork(nodes, edges) \%>\%
 visHierarchicalLayout(direction = "LR")
}

