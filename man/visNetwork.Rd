% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/visNetwork.R
\name{visNetwork}
\alias{visNetwork}
\title{Network visualization}
\usage{
visNetwork(nodes = NULL, edges = NULL, dot = NULL, gephi = NULL,
  legend = FALSE, legend.width = 0.2, width = NULL, height = NULL)
}
\arguments{
\item{nodes}{: data.frame with nodes informations. Needed at least column "id". See \link{visNodes}
\itemize{
 \item{"id"}{ : id of the node, needed in edges information}
 \item{"label"}{ : label of the node}
 \item{"group"}{ : group of the node. Groups can be configure with \link{visGroups}}
 \item{"value"}{ : size of the node}
 \item{"title"}{ : tooltip of the node}
 \item{...}{}
}}

\item{edges}{: data.frame with edges informations. Needed at least columns "from" and "to".
See See \link{visEdges}
\itemize{
 \item{"from"}{ : node id of begin of the edge}
 \item{"to"}{ : node id of end of the edge}
 \item{"label"}{ : label of the edge}
 \item{"value"}{ : size of the node}
 \item{"title"}{ : tooltip of the node}
 \item{...}{}
}}

\item{dot}{: Character DOT language.}

\item{gephi}{: Json export gephi path file.}

\item{legend}{: Boolean. Default to FALSE. A little bit experimental. Put a legend in case of groups.}

\item{legend.width}{: Number, in [0,...,1]. Default to 0.2}
}
\description{
Network visualization using vis.js library.  \href{../doc/network/index.html}{vis.js html documentation}
}
\examples{
# minimal example
nodes <- data.frame(id = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))

visNetwork(nodes, edges)

# more variables
nb <- 15
nodes <- data.frame(id = 1:nb, label = paste("Label", 1:nb),
 group = sample(LETTERS[1:3], nb, replace = TRUE), value = 1:nb,
 title = paste0("<p>", 1:nb,"<br>Tooltip !</p>"), stringsAsFactors = FALSE)

edges <- data.frame(from = trunc(runif(nb)*(nb-1))+1,
 to = trunc(runif(nb)*(nb-1))+1,
 value = rnorm(nb, 10), label = paste("Edge", 1:nb),
 title = paste0("<p>", 1:nb,"<br>Edge Tooltip !</p>"))

# simple network
visNetwork(nodes, edges)

# highlight nearest
visNetwork(nodes, edges) \%>\% visOptions(highlightNearest = TRUE)

# try a legend...
visNetwork(nodes, edges, legend = TRUE)

# try an id node selection
visNetwork(nodes, edges) \%>\%
 visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)

# directed network
visNetwork(nodes, edges) \%>\% visEdges(style = "arrow")

# custom navigation
visNetwork(nodes, edges) \%>\%
 visInteraction(navigationButtons = TRUE)

# data Manipulation
visNetwork(nodes, edges) \%>\% visOptions(manipulation = TRUE)

# Hierarchical Layout
visNetwork(nodes, edges) \%>\% visHierarchicalLayout()

# freeze network
visNetwork(nodes, edges) \%>\%
 visInteraction(dragNodes = FALSE, dragView = FALSE, zoomView = FALSE)


# Save a network
network <- visNetwork(nodes, edges, legend = TRUE) \%>\%
 visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE,
 manipulation = TRUE)

htmlwidgets::saveWidget(network, "network.html")

# DOT language
visNetwork(dot = 'dinetwork {1 -> 1 -> 2; 2 -> 3; 2 -- 4; 2 -> 1 }')

# gephi json file
gephiNetwork <- visNetwork(gephi = 'WorldCup2014.json') \%>\%
 visOptions(smoothCurves = list(dynamic = FALSE, type ="continuous"), stabilize = FALSE,
 hideEdgesOnDrag = TRUE) \%>\% visEdges(width = 0.15, inheritColor = "from") \%>\%
 visPhysics(barnesHut = list(gravitationalConstant = -10000, springConstant = 0.002, springLength= 150))
}
\seealso{
\link{visOptions}, \link{visNodes}, \link{visEdges}, \link{visGroups}, \link{visEvents}
}

